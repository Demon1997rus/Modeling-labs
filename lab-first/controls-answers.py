import matplotlib.pyplot as plt
import numpy as np
from math import comb


# 1. Вопрос 1: Функции P(X) и F(X) для бросания монеты
def question_1():
    print(
        "Вопрос 1: Функции вероятности P(X) и распределения F(X) для 3 бросков монеты."
    )

    n = 3  # Количество бросков
    p = 0.5  # Вероятность выпадения "орла"
    X = [0, 1, 2, 3]  # Возможные значения X (число "орлов")

    # Рассчитываем вероятности P(X)
    probabilities = [binomial_probability(n, k, p) for k in X]
    print(f"P(X): {probabilities}")

    # Рассчитываем функции распределения F(X)
    cumulative_probabilities = np.cumsum(probabilities)
    print(f"F(X): {cumulative_probabilities}")

    # Построение графиков
    plot_bar(
        X, probabilities, "results/p_x_bar.png", title="P(X): Вероятности числа орлов"
    )
    plot_step(
        X,
        cumulative_probabilities,
        "results/f_x_step.png",
        title="F(X): Функция накопленной вероятности",
    )
    print("\n")


# 2. Вопрос 2: Построение F(X) по f(X) для равномерного распределения
def question_2():
    print(
        "Вопрос 2: Построение функции распределения F(X) по плотности вероятности f(X)."
    )

    a, b = 2, 6  # Интервал равномерного распределения
    X = np.linspace(1, 7, 100)  # Диапазон значений X (включаем чуть шире интервала)

    # Плотность вероятности
    f_density = 1 / (b - a)  # Плотность вероятности в равномерном распределении
    print(f"Плотность вероятности f(X) = {f_density}, для {a} <= X <= {b}.")

    # Функция распределения F(X)
    F = np.clip((X - a) / (b - a), 0, 1)

    # Построение графика
    plt.plot(X, F, label="F(X)", color="blue")
    plt.title("F(X): Функция распределения для равномерного распределения")
    plt.xlabel("X")
    plt.ylabel("F(X)")
    plt.grid()
    plt.legend()
    plt.savefig("results/f_x_uniform.png")
    plt.close()
    print("\n")


# 3. Вопрос 3: Может ли случайная величина быть сразу дискретной и непрерывной?
def question_3():
    print(
        "Вопрос 3: Может ли случайная величина быть одновременно дискретной и непрерывной?"
    )
    print(
        "Ответ: Нет. Случайная величина не может быть одновременно полностью дискретной и полностью непрерывной. \n"
    )
    print(
        "Однако существуют смешанные случайные величины, которые содержат и дискретные, и непрерывные части."
    )
    print(
        "Пример: страховые выплаты. Если авария не произошла, потеря равна 0 (дискретная величина). Если произошла, сумма убытков определяется непрерывно (в зависимости от ущерба)."
    )
    print("\n")


# 4. Вопрос 4: Физический смысл математического ожидания и дисперсии
def question_4():
    print("Вопрос 4: Каков физический смысл математического ожидания и дисперсии?")
    print("Математическое ожидание:")
    print(
        "- Это среднее значение случайной величины. Оно показывает, какое значение мы ожидаем получить в среднем."
    )
    print(
        "- Например, если бросить монету 100 раз, ожидаемое количество орлов = 50 (половина всех бросков)."
    )
    print("\nДисперсия:")
    print(
        "- Это показатель разброса случайной величины относительно её среднего значения (математического ожидания)."
    )
    print(
        "- Чем больше дисперсия, тем больше вероятностные значения отклоняются от среднего."
    )
    print(
        "- Пример: В игре на кубике разброс результатов (1, 2, 3, 4, 5, 6) будет больше, чем разброс значений при бросании монеты (0 или 1)."
    )
    print("\n")


# 5. Вопрос 5: Методы генерации случайных чисел
def question_5():
    print("Вопрос 5: Какие способы генерации случайных чисел вы знаете?")
    print("1. Алгоритмические методы:")
    print("- Линейный конгруэнтный метод.")
    print("- Метод серединных квадратов.")
    print("- Метод Неймана (метод отбора).")
    print("\n2. Компьютерные генераторы:")
    print("- Генераторы псевдослучайных чисел (`random` в Python).")
    print(
        "- Истинные случайные числа, основанные на физических явлениях (радиошумы, радиоактивный распад)."
    )
    print("\n")


# 6. Вопрос 6: Требования к генераторам псевдослучайных чисел
def question_6():
    print(
        "Вопрос 6: Каким требованиям должны удовлетворять генераторы псевдослучайных чисел?"
    )
    print(
        "1. Равномерное распределение: числа должны равномерно покрывать заданный интервал."
    )
    print(
        "2. Независимость: каждое сгенерированное число не должно зависеть от предыдущих."
    )
    print(
        "3. Большой период: числа в последовательности не должны повторяться на коротком интервале."
    )
    print(
        "4. Воспроизводимость: при одинаковом начальном значении (зёрне) генератор должен выдавать ту же последовательность."
    )
    print(
        "5. Эффективность: генератор должен работать быстро и потреблять мало ресурсов."
    )
    print("\n")


# Вспомогательные функции
def binomial_probability(n, k, p):
    """Рассчитывает вероятность P(X = k) по распределению Бернулли."""
    return comb(n, k) * (p**k) * ((1 - p) ** (n - k))


def plot_bar(X, probabilities, file_name, title="Бар-график"):
    """Построение бар-графика (для функции вероятности)."""
    plt.bar(X, probabilities, color="skyblue", edgecolor="black")
    plt.title(title)
    plt.xlabel("X")
    plt.ylabel("P(X)")
    plt.grid()
    plt.savefig(file_name)
    plt.close()


def plot_step(X, cumulative_probabilities, file_name, title="График F(X)"):
    """Построение ступенчатого графика (для функции распределения)."""
    plt.step(X, cumulative_probabilities, where="post", color="blue", label="F(X)")
    plt.title(title)
    plt.xlabel("X")
    plt.ylabel("F(X)")
    plt.legend()
    plt.grid()
    plt.savefig(file_name)
    plt.close()


# Основная функция
if __name__ == "__main__":
    import os

    if not os.path.exists("results"):
        os.makedirs("results")  # Создаём папку для сохранения графиков

    # Вопрос 1
    question_1()

    # Вопрос 2
    question_2()

    # Вопрос 3
    question_3()

    # Вопрос 4
    question_4()

    # Вопрос 5
    question_5()

    # Вопрос 6
    question_6()
